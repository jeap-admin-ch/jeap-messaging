package ch.admin.bit.jeap.messaging.avro.plugin.interfaces;

import ch.admin.bit.jeap.domainevent.DomainEventIdentity;
import ch.admin.bit.jeap.messaging.model.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.apache.avro.Schema;
import org.apache.avro.specific.SpecificRecord;

import java.util.LinkedList;
import java.util.List;

@RequiredArgsConstructor(access = AccessLevel.PRIVATE)
class InterfaceList {
    private final List<String> interfaceNames = new LinkedList<>();

    @Builder
    private static String create(@NonNull Schema schema) {
        InterfaceList interfaceList = new InterfaceList();
        interfaceList.addAvroInterfaces(schema);
        interfaceList.addBaseTypesInterfaces(schema);
        interfaceList.addCustomTypesInterfaces(schema);
        return interfaceList.toString();
    }

    private void addAvroInterfaces(Schema schema) {
        addClass(SpecificRecord.class);

        //NOTE: As those classes are generated by this plugin as well we cannot import the classes here but use strings
        if (schema.getName().endsWith("Event")) {
            addName("ch.admin.bit.jeap.domainevent.avro.AvroDomainEvent");
        }
        if (schema.getName().endsWith("Command")) {
            addName("ch.admin.bit.jeap.command.avro.AvroCommand");
        }
        if (schema.getName().endsWith("MessageKey")) {
            addName("ch.admin.bit.jeap.messaging.avro.AvroMessageKey");
        }
    }

    private void addBaseTypesInterfaces(Schema schema) {
        if (schema.getName().endsWith("AvroDomainEventIdentity")) {
            addClass(DomainEventIdentity.class);
        }
        if (schema.getName().endsWith("AvroDomainEventType")) {
            addClass(MessageType.class);
        }
        if (schema.getName().endsWith("AvroDomainEventPublisher")) {
            addClass(MessagePublisher.class);
        }
        if (schema.getName().endsWith("AvroDomainEventUser")) {
            addClass(MessageUser.class);
        }
        if (schema.getName().endsWith("AvroMessageIdentity")) {
            addClass(MessageIdentity.class);
        }
        if (schema.getName().endsWith("AvroMessageType")) {
            addClass(MessageType.class);
        }
        if (schema.getName().endsWith("AvroMessagePublisher")) {
            addClass(MessagePublisher.class);
        }
        if (schema.getName().endsWith("AvroMessageUser")) {
            addClass(MessageUser.class);
        }
    }

    private void addCustomTypesInterfaces(Schema schema) {
        if (schema.getName().endsWith("References")) {
            addClass(MessageReferences.class);
        }
        if (schema.getName().endsWith("Payload")) {
            addClass(MessagePayload.class);
        }
    }

    private void addClass(Class<?> klass) {
        addName(klass.getCanonicalName());
    }

    private void addName(String name) {
        interfaceNames.add(name);
    }

    @Override
    public String toString() {
        return String.join(", ", interfaceNames);
    }
}
