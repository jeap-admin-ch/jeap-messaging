/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package ch.admin.bit.jeap.kafka.serde.confluent;

import ch.admin.bit.jeap.kafka.SerializedMessageReceiver;
import org.apache.avro.specific.SpecificData;

//Sample generated avro class implementing SerializedMessageReceiver

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentWithMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord, SerializedMessageReceiver {
    private static final long serialVersionUID = 2501831387695936578L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentWithMessage\",\"namespace\":\"ch.admin.bit.jeap.kafka.serde.confluent\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"Vorname\",\"type\":\"string\"},{\"name\":\"Nachname\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public CharSequence id;
    @Deprecated
    public CharSequence Vorname;
    @Deprecated
    public CharSequence Nachname;
    @Deprecated
    public double value;


    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public PaymentWithMessage() {
    }

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param Vorname The new value for Vorname
     * @param Nachname The new value for Nachname
     * @param value The new value for value
     */
    public PaymentWithMessage(CharSequence id, CharSequence Vorname, CharSequence Nachname, Double value) {
        this.id = id;
        this.Vorname = Vorname;
        this.Nachname = Nachname;
        this.value = value;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return Vorname;
            case 2:
                return Nachname;
            case 3:
                return value;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                id = (CharSequence) value$;
                break;
            case 1:
                Vorname = (CharSequence) value$;
                break;
            case 2:
                Nachname = (CharSequence) value$;
                break;
            case 3:
                value = (Double) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public CharSequence getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(CharSequence value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'Vorname' field.
     * @return The value of the 'Vorname' field.
     */
    public CharSequence getVorname() {
        return Vorname;
    }

    /**
     * Sets the value of the 'Vorname' field.
     * @param value the value to set.
     */
    public void setVorname(CharSequence value) {
        this.Vorname = value;
    }

    /**
     * Gets the value of the 'Nachname' field.
     * @return The value of the 'Nachname' field.
     */
    public CharSequence getNachname() {
        return Nachname;
    }

    /**
     * Sets the value of the 'Nachname' field.
     * @param value the value to set.
     */
    public void setNachname(CharSequence value) {
        this.Nachname = value;
    }

    /**
     * Gets the value of the 'value' field.
     * @return The value of the 'value' field.
     */
    public Double getValue() {
        return value;
    }

    /**
     * Sets the value of the 'value' field.
     * @param value the value to set.
     */
    public void setValue(Double value) {
        this.value = value;
    }

    /**
     * Creates a new Payment RecordBuilder.
     * @return A new Payment RecordBuilder
     */
    public static PaymentWithMessage.Builder newBuilder() {
        return new PaymentWithMessage.Builder();
    }

    /**
     * Creates a new Payment RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Payment RecordBuilder
     */
    public static PaymentWithMessage.Builder newBuilder(PaymentWithMessage.Builder other) {
        return new PaymentWithMessage.Builder(other);
    }

    /**
     * Creates a new Payment RecordBuilder by copying an existing Payment instance.
     * @param other The existing instance to copy.
     * @return A new Payment RecordBuilder
     */
    public static PaymentWithMessage.Builder newBuilder(PaymentWithMessage other) {
        return new PaymentWithMessage.Builder(other);
    }

    private byte[] serializedMessage;

    public byte[] getSerializedMessage() {
        return serializedMessage;
    }

    @Override
    public void setSerializedMessage(byte[] serializedMessage) {
        this.serializedMessage = serializedMessage;
    }

    /**
     * RecordBuilder for Payment instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentWithMessage>
            implements org.apache.avro.data.RecordBuilder<PaymentWithMessage> {

        private CharSequence id;
        private CharSequence Vorname;
        private CharSequence Nachname;
        private double value;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(PaymentWithMessage.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.Vorname)) {
                this.Vorname = data().deepCopy(fields()[1].schema(), other.Vorname);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.Nachname)) {
                this.Nachname = data().deepCopy(fields()[2].schema(), other.Nachname);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.value)) {
                this.value = data().deepCopy(fields()[3].schema(), other.value);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Payment instance
         * @param other The existing instance to copy.
         */
        private Builder(PaymentWithMessage other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.Vorname)) {
                this.Vorname = data().deepCopy(fields()[1].schema(), other.Vorname);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.Nachname)) {
                this.Nachname = data().deepCopy(fields()[2].schema(), other.Nachname);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.value)) {
                this.value = data().deepCopy(fields()[3].schema(), other.value);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public CharSequence getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public PaymentWithMessage.Builder setId(CharSequence value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public PaymentWithMessage.Builder clearId() {
            id = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'Vorname' field.
         * @return The value.
         */
        public CharSequence getVorname() {
            return Vorname;
        }

        /**
         * Sets the value of the 'Vorname' field.
         * @param value The value of 'Vorname'.
         * @return This builder.
         */
        public PaymentWithMessage.Builder setVorname(CharSequence value) {
            validate(fields()[1], value);
            this.Vorname = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'Vorname' field has been set.
         * @return True if the 'Vorname' field has been set, false otherwise.
         */
        public boolean hasVorname() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'Vorname' field.
         * @return This builder.
         */
        public PaymentWithMessage.Builder clearVorname() {
            Vorname = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'Nachname' field.
         * @return The value.
         */
        public CharSequence getNachname() {
            return Nachname;
        }

        /**
         * Sets the value of the 'Nachname' field.
         * @param value The value of 'Nachname'.
         * @return This builder.
         */
        public PaymentWithMessage.Builder setNachname(CharSequence value) {
            validate(fields()[2], value);
            this.Nachname = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'Nachname' field has been set.
         * @return True if the 'Nachname' field has been set, false otherwise.
         */
        public boolean hasNachname() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'Nachname' field.
         * @return This builder.
         */
        public PaymentWithMessage.Builder clearNachname() {
            Nachname = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'value' field.
         * @return The value.
         */
        public Double getValue() {
            return value;
        }

        /**
         * Sets the value of the 'value' field.
         * @param value The value of 'value'.
         * @return This builder.
         */
        public PaymentWithMessage.Builder setValue(double value) {
            validate(fields()[3], value);
            this.value = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'value' field has been set.
         * @return True if the 'value' field has been set, false otherwise.
         */
        public boolean hasValue() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'value' field.
         * @return This builder.
         */
        public PaymentWithMessage.Builder clearValue() {
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public PaymentWithMessage build() {
            try {
                PaymentWithMessage record = new PaymentWithMessage();
                record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
                record.Vorname = fieldSetFlags()[1] ? this.Vorname : (CharSequence) defaultValue(fields()[1]);
                record.Nachname = fieldSetFlags()[2] ? this.Nachname : (CharSequence) defaultValue(fields()[2]);
                record.value = fieldSetFlags()[3] ? this.value : (Double) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
